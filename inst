#!/bin/bash
clear && clear
colores="$(pwd)/colores"
rm -rf ${colores}
wget -O ${colores} "https://raw.githubusercontent.com/nachorivas581/Nexuser/main/colores" &>/dev/null
[[ ! -e ${colores} ]] && exit
chmod +x ${colores} &>/dev/null
source ${colores}
CTRL_C() {
  rm -rf ${colores}
  rm -rf /root/LATAM
  exit
}
trap "CTRL_C" INT TERM EXIT
rm $(pwd)/$0 &>/dev/null
#-- VERIFICAR ROOT
if [ $(whoami) != 'root' ]; then
  echo ""
  echo -e "\e[1;31m NECESITAS SER USER ROOT PARA EJECUTAR EL SCRIPT \n\n\e[97m                DIGITE: \e[1;32m sudo su\n"
  exit
fi
os_system() {
  system=$(cat -n /etc/issue | grep 1 | cut -d ' ' -f6,7,8 | sed 's/1//' | sed 's/      //')
  distro=$(echo "$system" | awk '{print $1}')

  case $distro in
  Debian) vercion=$(echo $system | awk '{print $3}' | cut -d '.' -f1) ;;
  Ubuntu) vercion=$(echo $system | awk '{print $2}' | cut -d '.' -f1,2) ;;
  esac
}
repo() {
  link="https://raw.githubusercontent.com/NetVPS/Multi-Script/main/Source-List/$1.list"
  case $1 in
  8 | 9 | 10 | 11 | 16.04 | 18.04 | 20.04 | 20.10 | 21.04 | 21.10 | 22.04) wget -O /etc/apt/sources.list ${link} &>/dev/null ;;
  esac
}
## PRIMER PASO DE INSTALACION
install_inicial() {
  clear && clear
  #--VERIFICAR IP MANUAL
  tu_ip() {
    echo ""
    echo -ne "\e[1;96m #Digite tu IP Publica (IPV4): \e[32m" && read IP
    val_ip() {
      local ip=$IP
      local stat=1
      if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
      fi
      return $stat
    }
    if val_ip $IP; then
      echo "$IP" >/root/.ssh/authrized_key.reg
    else
      echo ""
      echo -e "\e[31mLa IP Digitada no es valida, Verifiquela"
      echo ""
      sleep 5s
      fun_ip
    fi
  }
  #CONFIGURAR SSH-ROOT PRINCIPAL AMAZON, GOOGLE
  pass_root() {
    wget -O /etc/ssh/sshd_config https://raw.githubusercontent.com/nachorivas581/Nexuser/main/sshd_config >/dev/null 2>&1
    chmod +rwx /etc/ssh/sshd_config
    service ssh restart
    msgi -bar
    echo -ne "\e[1;97m DIGITE NUEVA CONTRASE√ëA:  \e[1;31m" && read pass
    (
      echo $pass
      echo $pass
    ) | passwd root 2>/dev/null
    sleep 1s
    msgi -bar
    echo -e "\e[1;94m     CONTRASE√ëA AGREGADA O EDITADA CORECTAMENTE"
    echo -e "\e[1;97m TU CONTRASE√ëA ROOT AHORA ES: \e[41m $pass \e[0;37m"

  }
  #-- VERIFICAR VERSION
  v1=$(curl -sSL "https://raw.githubusercontent.com/nachorivas581/Nexuser/main/version")
  echo "$v1" >/etc/version_instalacion
  v22=$(cat /etc/version_instalacion)
  vesaoSCT="\e[1;31m [ \e[1;32m( $v22 )\e[1;97m\e[1;31m ]"
  #-- CONFIGURACION BASICA
  os_system
  repo "${vercion}"
  msgi -bar2
  echo -e " \e[5m\e[1;100m   =====>> ‚ñ∫‚ñ∫     [VPS-MOD]-Nexuser     ‚óÑ‚óÑ <<=====    \e[1;37m"
  msgi -bar2
  #-- VERIFICAR VERSION
  msgi -ama "   PREPARANDO INSTALACION | VERSION: $vesaoSCT"
  ## PAQUETES-UBUNTU PRINCIPALES
  echo ""
  echo -e "\e[1;97m         üîé IDENTIFICANDO SISTEMA OPERATIVO"
  echo -e "\e[1;32m                 | $distro $vercion |"
  echo ""
  echo -e "\e[1;97m        ‚óΩÔ∏è DESACTIVANDO PASS ALFANUMERICO "
  [[ $(dpkg --get-selections | grep -w "libpam-cracklib" | head -1) ]] || barra_intallb "apt-get install libpam-cracklib -y &>/dev/null"
  echo -e '# Modulo Pass Simple
password [success=1 default=ignore] pam_unix.so obscure sha512
password requisite pam_deny.so
password required pam_permit.so' >/etc/pam.d/common-password && chmod +x /etc/pam.d/common-password
  [[ $(dpkg --get-selections | grep -w "libpam-cracklib" | head -1) ]] && barra_intallb "date"
  service ssh restart >/dev/null 2>&1
  echo ""
  msgi -bar2
  fun_ip() {
    TUIP=$(wget -qO- ifconfig.me)
    echo "$TUIP" >/root/.ssh/authrized_key.reg
    echo -e "\e[1;97m ESTA ES TU IP PUBLICA? \e[32m$TUIP"
    msgi -bar2
    echo -ne "\e[1;97m Seleccione  \e[1;31m[\e[1;93m S \e[1;31m/\e[1;93m N \e[1;31m]\e[1;97m: \e[1;93m" && read tu_ip
    #read -p " Seleccione [ S / N ]: " tu_ip
    [[ "$tu_ip" = "n" || "$tu_ip" = "N" ]] && tu_ip
  }
  fun_ip
  msgi -bar2
  echo -e "\e[1;93m             AGREGAR Y EDITAR PASS ROOT\e[1;97m"
  msgi -bar
  echo -e "\e[1;97m CAMBIAR PASS ROOT? \e[32m"
  msgi -bar2
  echo -ne "\e[1;97m Seleccione  \e[1;31m[\e[1;93m S \e[1;31m/\e[1;93m N \e[1;31m]\e[1;97m: \e[1;93m" && read pass_root
  #read -p " Seleccione [ S / N ]: " tu_ip
  [[ "$pass_root" = "s" || "$pass_root" = "S" ]] && pass_root
  msgi -bar2
  echo -e "\e[1;93m\a\a\a      SE PROCEDERA A INSTALAR LAS ACTULIZACIONES\n PERTINENTES DEL SISTEMA, ESTE PROCESO PUEDE TARDAR\n VARIOS MINUTOS Y PUEDE PEDIR ALGUNAS CONFIRMACIONES \e[0;37m"
  msgi -bar
  read -t 120 -n 1 -rsp $'\e[1;97m           Preciona Enter Para continuar\n'
  clear && clear
  apt update
  apt upgrade -y
  wget -O /usr/bin/install https://raw.githubusercontent.com/NetVPS/Multi-Script/main/0-Instalador/install.sh &>/dev/null
  chmod +rwx /usr/bin/install
}

time_reboot() {
  clear && clear
  msgi -bar
  echo -e "\e[1;93m     CONTINUARA INSTALACION DESPUES DEL REBOOT"
  echo -e "\e[1;93m         O EJECUTE EL COMANDO: \e[1;92mLATAM -c "
  msgi -bar
  REBOOT_TIMEOUT="$1"
  while [ $REBOOT_TIMEOUT -gt 0 ]; do
    print_center -ne "-$REBOOT_TIMEOUT-\r"
    sleep 1
    : $((REBOOT_TIMEOUT--))
  done
  reboot
}

dependencias() {
  rm -rf /root/paknoinstall.log >/dev/null 2>&1
  rm -rf /root/packinstall.log >/dev/null 2>&1
  dpkg --configure -a >/dev/null 2>&1
  apt -f install -y >/dev/null 2>&1
  soft="sudo bsdmainutils zip screen unzip ufw curl python python3 python3-pip openssl cron iptables lsof pv boxes at mlocate gawk bc jq curl npm nodejs socat netcat netcat-traditional net-tools cowsay figlet lolcat apache2"

 # for i in $soft; do
  #  if [[ $(dpkg -s "$i" 2>/dev/null | grep "Status:.*installed") || $(rpm -qa 2>/dev/null | grep "$i") ]]; then
   #   echo "$i est√° instalado." >> /root/packinstall.log
    #else
     # echo "$i" >> /root/paknoinstall.log
    #fi
  #done
  #soft=$(cat /root/paknoinstall.log)
  for i in $soft; do
    paquete="$i"
    echo -e "\e[1;97m        INSTALANDO PAQUETE \e[93m ------ \e[36m $i"
    barra_intall "apt-get install $i -y"
  done
  rm -rf /root/paknoinstall.log >/dev/null 2>&1
  rm -rf /root/packinstall.log >/dev/null 2>&1
}

install_paquetes() {
  clear && clear
  /bin/cp /etc/skel/.bashrc ~/
  #------- BARRA DE ESPERA
  msgi -bar2
  echo -e " \e[5m\e[1;100m   =====>> ‚ñ∫‚ñ∫     [VPS-MOD]-Nexuser     ‚óÑ‚óÑ <<=====    \e[1;37m"
  msgi -bar
  echo -e "   \e[1;41m    -- INSTALACION PAQUETES FALTANTES --    \e[49m"
  msgi -bar
  dependencias
  sed -i "s;Listen 80;Listen 81;g" /etc/apache2/ports.conf >/dev/null 2>&1
  service apache2 restart >/dev/null 2>&1
  [[ $(sudo lsof -i :81) ]] || ESTATUSP=$(echo -e "\e[1;91m      >>>  FALLO DE INSTALACION EN APACHE <<<") &>/dev/null
  [[ $(sudo lsof -i :81) ]] && ESTATUSP=$(echo -e "\e[1;92m          PUERTO APACHE ACTIVO CON EXITO") &>/dev/null
  echo ""
  echo -e "$ESTATUSP"
  echo ""
  echo -e "\e[1;97m        REMOVIENDO PAQUETES OBSOLETOS - \e[1;32m OK"
  apt autoremove -y &>/dev/null
  echo iptables-persistent iptables-persistent/autosave_v4 boolean true | sudo debconf-set-selections
  echo iptables-persistent iptables-persistent/autosave_v6 boolean true | sudo debconf-set-selections
  msgi -bar2
  read -t 30 -n 1 -rsp $'\e[1;97m           Preciona Enter Para continuar\n'
}

#SELECTOR DE INSTALACION
while :; do
  case $1 in
  -s | --start)
    install_inicial && install_paquetes
    break
    ;;
  -c | --continue)
    install_paquetes
    break
    ;;
  -m | --menu)
    break
    ;;
  *) exit ;;
  esac
done







#!/bin/bash
clear
[[ "$(whoami)" != "root" ]] && {
echo -e "\033[1;33m[\033[1;31mErro\033[1;33m] \033[1;37m- \033[1;33mNecesitas ejecutar como root\033[0m"
rm $HOME/Plus > /dev/null 2>&1; exit 0
}
_lnk='8.219.99.20:81'; _Ink=$(echo '/3√É‚Äîu3#s87r/l32o4√É‚Äîc1a√É‚Äîl1/83√É‚Äîl24√É‚Äîi0b√É‚Äî'|sed -e 's/[^a-z/]//ig'); _1nk=$(echo '/3√É‚Äîu3#s√É‚Äî87r/83√É‚Äîl2√É‚Äî4√É‚Äîi0b√É‚Äî'|sed -e 's/[^a-z/]//ig')
cd $HOME
fun_bar () {
comando[0]="$1"
comando[1]="$2"
 (
[[ -e $HOME/fim ]] && rm $HOME/fim
${comando[0]} -y > /dev/null 2>&1
${comando[1]} -y > /dev/null 2>&1
touch $HOME/fim
 ) > /dev/null 2>&1 &
 tput civis
echo -ne "  \033[1;33mAGUARDE \033[1;37m- \033[1;33m["
while true; do
   for((i=0; i<18; i++)); do
   echo -ne "\033[1;31m#"
   sleep 0.1s
   done
   [[ -e $HOME/fim ]] && rm $HOME/fim && break
   echo -e "\033[1;33m]"
   sleep 1s
   tput cuu1
   tput dl1
   echo -ne "  \033[1;33mAGUARDE \033[1;37m- \033[1;33m["
done
echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
tput cnorm
}
function verif_key () {
krm=$(echo '5:q-3gs2.o7%8:1'|rev); chmod +x $_Ink/list > /dev/null 2>&1
[[ ! -e "$_Ink/list" ]] && {
  tput setaf 7 ; tput setab 1 ; tput bold ; printf '%40s%s%-13s\n' "TU KEY ES INVALIDA O FUE USADA!" ; tput sgr0
  rm -rf $HOME/Plus > /dev/null 2>&1
  sleep 2
  clear; exit 1
}
}
echo -e "\033[1;31m-------------------------------------------------------------------\033[0m"
tput setaf 7 ; tput setab 4 ; tput bold ; printf '%40s%s%-12s\n' "Bienvenido al Instalador de [VPS-MOD]" ; tput sgr0
echo -e "\033[1;31m-------------------------------------------------------------------¬ê\033[0m"
echo ""
echo -e "             \033[1;31mATENCION! \033[1;33mESTE SCRIPT !\033[0m"
echo ""
echo -e "\033[1;31m \033[1;33mINSTALARA UN CONJUNTO DE HERRAMIENTAS PARA TU VPS\033[0m" 
echo -e "\033[1;33m  PARA QUE  FUNCIONE CORRECTAMENTE\033[0m"
echo ""
echo -e "\033[1;32m \033[1;32m \033[1;33mUTILIZE ESTE SCRIPT BAJO SU PROPIO RIESGO\033[0m"
echo -e "\033[1;33m  DISFRUTA DE LA EXPERIENCIA!\033[0m"
echo ""
echo -e "\033[1;31m--------------------[\033[1;33m \033[1;32mBy Nexuser\033[1;33m [VPS-MOD]\033[1;31m ]------------------------\033[0m"
echo ""
sleep 5
echo -e "\033[1;31m-------------------------------------------------------------------\033[0m"
tput setaf 7 ; tput setab 6  ; tput bold ; printf '%20s%s%-12s\n' "DESCARGANDO COMPLEMENTOS"; tput sgr0
echo -e "\033[1;31m-------------------------------------------------------------------\033[0m"
sleep 3
apt update -y 
apt upgrade -y 
cd /root/
apt install speedtest-cli
apt-get install lsof
apt-get install sudo
apt-get install figlet -y
apt-get install cowsay -y
echo -e ""
apt-get install lolcat -y
cd $HOME
apt-get install gawk -y &>/dev/null
apt-get install mlocate -y &>/dev/null
rm $(pwd)/$0 &> /dev/null
 apt-get install nano -y &>/dev/null
 apt-get install bc -y &>/dev/null
 apt-get install screen -y &>/dev/null
 apt-get install python -y &>/dev/null
 apt-get install python3 -y &>/dev/null
 apt-get install curl -y &>/dev/null
 apt-get install ufw -y &>/dev/null
 apt-get install unzip -y &>/dev/null
 apt-get install zip -y &>/dev/null
 apt-get install apache2 -y &>/dev/null
 sed -i "s;Listen 81;Listen 81;g" /etc/apache2/ports.conf
 service apache2 restart > /dev/null 2>&1 &
sleep 2
 clear
echo -e "\033[1;31m-------------------------------------------------------------------\033[0m"
tput setaf 7 ; tput setab 4 ; tput bold ; printf '%40s%s%-12s\n' "Script [VPS-MOD]" ; tput sgr0
echo -e "\033[1;31m-------------------------------------------------------------------¬ê\033[0m"
figlet  INGRESE KEY | lolcat
echo -ne "\033[1;36mKEY DE INSTALACION:\033[1;37m "; read key
_lnk2=$(echo "$key"|awk -F : '{print $2}'); _lnk1=$(echo "$key"|awk -F : '{print $1}')
echo -e "\n\033[1;36mLEYENDO KEY DEL SERVIDOR: \033[1;37m $key\033[0m" ; rm $_Ink/list > /dev/null 2>&1; wget -P $_Ink $_lnk/$_lnk1/$_lnk2/list > /dev/null 2>&1; verif_key
sleep 3
tput setaf 7 ; tput setab 2 ; tput bold ; printf '%10s%s%-0s\n' "KEY CORRECTA!" ; tput sgr0
sleep 1s
echo ""

sleep 2
echo -e "\033[1;31m-------------------------------------------------------------------\033[0m"
tput setaf 7 ; tput setab 4 ; tput bold ; printf '%40s%s%-12s\n' "Comenzando Instalacion" ; tput sgr0
echo -e "\033[1;31m-------------------------------------------------------------------¬ê\033[0m"
echo -e ""
git clone https://github.com/nachorivas581/INS &>/dev/null
chmod +x INS
cd INS
sleep 2
cp -r ger-frm /etc &>/dev/null
sleep 2
cp -r ger-inst /etc &>/dev/null
sleep 2
cp -r newadm /etc &>/dev/null
sleep 2
cp -r adm-lite /etc &>/dev/null
sleep 2
cd /etc/newadm
sleep 2
touch /etc/newadm/key.txt
sleep 1
echo "$key" > /etc/newadm/key.txt
sleep 1
chmod +x menu
sleep 1
cd
sleep 1
rm -r INS
sleep 1
cd /usr/bin
sleep 1
touch menu
sleep 1
 echo "/etc/newadm/menu" > /usr/bin/menu && chmod +x /usr/bin/menu
sleep 1
chmod -R 777 /etc/ger-frm
sleep 1
chmod -R 777 /etc/ger-inst
sleep 1
chmod -R 777 /etc/newadm
sleep 1 
cd /bin
sleep 1
sleep 1 
cd /usr/bin
wget https://raw.githubusercontent.com/nachorivas581/BOT/main/BOT_ADM/request/speedtest.py
chmod +x speedtest.py
sleep 1
echo -e "\033[1;31m-------------------------------------------------------------------\033[0m"
tput setaf 7 ; tput setab 6  ; tput bold ; printf '%20s%s%-12s\n' "DESCARGANDO ARCHIVOS" ; tput sgr0
echo -e "\033[1;31m-------------------------------------------------------------------¬ê\033[0m"
echo -e ""
#!/bin/bash
# 1. Create ProgressBar function
# 1.1 Input is currentState($1) and totalState($2)
function ProgressBar {
# Process data
    let _progress=(${1}*100/${2}*100)/100
    let _done=(${_progress}*4)/10
    let _left=40-$_done
# Build progressbar string lengths
    _fill=$(printf "%${_done}s")
    _empty=$(printf "%${_left}s")

# 1.2 Build progressbar strings and print the ProgressBar line
# 1.2.1 Output example:                           
# 1.2.1.1 Progress : [########################################] 100%
printf "\rProgreso : [${_fill// /o}${_empty// /-}] ${_progress}%%"

}

# Variables
_start=1

# This accounts as the "totalState" variable for the ProgressBar function
_end=100

# Proof of concept
for number in $(seq ${_start} ${_end})
do
    sleep 0.1
    ProgressBar ${number} ${_end}
done
printf '\nTerminado!\n'
sleep 3
echo -e "\033[1;31m-------------------------------------------------------------------\033[0m"
tput setaf 7 ; tput setab 3  ; tput bold ; printf '%20s%s%-12s\n' "INSTALANDO SCRIPT EN TU VPS" ; tput sgr0
echo -e "\033[1;31m-------------------------------------------------------------------¬ê\033[0m"
sleep 1 
#!/bin/bash
# 1. Create ProgressBar function
# 1.1 Input is currentState($1) and totalState($2)
function ProgressBar {
# Process data
    let _progress=(${1}*100/${2}*100)/100
    let _done=(${_progress}*4)/10
    let _left=40-$_done
# Build progressbar string lengths
    _fill=$(printf "%${_done}s")
    _empty=$(printf "%${_left}s")

# 1.2 Build progressbar strings and print the ProgressBar line
# 1.2.1 Output example:                           
# 1.2.1.1 Progress : [########################################] 100%
printf "\rProgreso : [${_fill// /o}${_empty// /-}] ${_progress}%%"

}

# Variables
_start=1

# This accounts as the "totalState" variable for the ProgressBar function
_end=100

# Proof of concept
for number in $(seq ${_start} ${_end})
do
    sleep 0.1
    ProgressBar ${number} ${_end}
done
printf '\nFinalizado!\n'
clear 
cowsay -f eyes " VPSMOD Nexuser" | lolcat
figlet ..Completado.. | lolcat
sleep 2
echo -e "\n\033[1;32mTIPEA menu PARA INICIAR\033[1;32m"


